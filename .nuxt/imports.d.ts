export { useScriptTriggerConsent, useScriptEventPage, useScriptTriggerElement, useScript, useScriptGoogleAnalytics, useScriptPlausibleAnalytics, useScriptCrisp, useScriptClarity, useScriptCloudflareWebAnalytics, useScriptFathomAnalytics, useScriptMatomoAnalytics, useScriptGoogleTagManager, useScriptGoogleAdsense, useScriptSegment, useScriptMetaPixel, useScriptXPixel, useScriptIntercom, useScriptHotjar, useScriptStripe, useScriptLemonSqueezy, useScriptVimeoPlayer, useScriptYouTubePlayer, useScriptGoogleMaps, useScriptNpm, useScriptUmamiAnalytics, useScriptSnapchatPixel, useScriptRybbitAnalytics } from '#app/composables/script-stubs';
export { isVue2, isVue3 } from 'vue-demi';
export { defineNuxtLink } from '#app/components/nuxt-link';
export { useNuxtApp, tryUseNuxtApp, defineNuxtPlugin, definePayloadPlugin, useRuntimeConfig, defineAppConfig } from '#app/nuxt';
export { useAppConfig, updateAppConfig } from '#app/config';
export { defineNuxtComponent } from '#app/composables/component';
export { useAsyncData, useLazyAsyncData, useNuxtData, refreshNuxtData, clearNuxtData } from '#app/composables/asyncData';
export { useHydration } from '#app/composables/hydrate';
export { callOnce } from '#app/composables/once';
export { useState, clearNuxtState } from '#app/composables/state';
export { clearError, isNuxtError, showError, useError } from '#app/composables/error';
export { useFetch, useLazyFetch } from '#app/composables/fetch';
export { useCookie, refreshCookie } from '#app/composables/cookie';
export { onPrehydrate, prerenderRoutes, useRequestHeader, useRequestHeaders, useResponseHeader, useRequestEvent, useRequestFetch, setResponseStatus } from '#app/composables/ssr';
export { onNuxtReady } from '#app/composables/ready';
export { preloadComponents, prefetchComponents, preloadRouteComponents } from '#app/composables/preload';
export { abortNavigation, addRouteMiddleware, defineNuxtRouteMiddleware, setPageLayout, navigateTo, useRoute, useRouter } from '#app/composables/router';
export { isPrerendered, loadPayload, preloadPayload, definePayloadReducer, definePayloadReviver } from '#app/composables/payload';
export { useLoadingIndicator } from '#app/composables/loading-indicator';
export { getAppManifest, getRouteRules } from '#app/composables/manifest';
export { reloadNuxtApp } from '#app/composables/chunk';
export { useRequestURL } from '#app/composables/url';
export { usePreviewMode } from '#app/composables/preview';
export { useRouteAnnouncer } from '#app/composables/route-announcer';
export { useRuntimeHook } from '#app/composables/runtime-hook';
export { useHead, useHeadSafe, useServerHeadSafe, useServerHead, useSeoMeta, useServerSeoMeta, injectHead } from '#app/composables/head';
export { onBeforeRouteLeave, onBeforeRouteUpdate, useLink } from 'vue-router';
export { withCtx, withDirectives, withKeys, withMemo, withModifiers, withScopeId, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onServerPrefetch, onUnmounted, onUpdated, computed, customRef, isProxy, isReactive, isReadonly, isRef, markRaw, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, watch, watchEffect, watchPostEffect, watchSyncEffect, onWatcherCleanup, isShallow, effect, effectScope, getCurrentScope, onScopeDispose, defineComponent, defineAsyncComponent, resolveComponent, getCurrentInstance, h, inject, hasInjectionContext, nextTick, provide, mergeModels, toValue, useModel, useAttrs, useCssModule, useCssVars, useSlots, useTransitionState, useId, useTemplateRef, useShadowRoot, Component, ComponentPublicInstance, ComputedRef, DirectiveBinding, ExtractDefaultPropTypes, ExtractPropTypes, ExtractPublicPropTypes, InjectionKey, PropType, Ref, MaybeRef, MaybeRefOrGetter, VNode, WritableComputedRef } from 'vue';
export { requestIdleCallback, cancelIdleCallback } from '#app/compat/idle-callback';
export { setInterval } from '#app/compat/interval';
export { defineLazyHydrationComponent } from '#app/composables/lazy-hydration';
export { useApiClient, useGlobalApiClient, useApiFetch } from '../composables/api/index';
export { getTokenFromCookie, setTokenToCookie, clearTokenFromCookie, createRequestKey, shouldRetryRequest, calculateRetryDelay, createEnhancedError, getUserFriendlyMessage, isNetworkError, isTimeoutError, isServerError, isClientError, createCacheItem, createAuthInterceptor, createErrorInterceptor, createDefaultConfig, mergeConfigs, isValidHttpMethod, isValidUrl, sanitizeUrl, sleep, executeWithRetry, createRequestTracker } from '../composables/api/api.utils';
export { useBaseDataTable, useCrudDataTable, useDataFetching, useDataFiltering, useDataPagination, useDataCaching } from '../composables/data/index';
export { createDefaultPaginationMeta, isValidPage, isValidPageSize, hasFiltersChanged, hasFiltersChangedFromDefault, mergeFilters, buildFullUrl, defaultTransformItem, defaultBeforeSubmit, defaultAfterFetch, extractErrorMessage, extractValidationErrors, isAllSelected, toggleAllSelection } from '../composables/data/data.utils';
export { useAdminNavigation, useUserNavigation, useNavigation, usePermissionGuards, useMenuState } from '../composables/navigation/index';
export { filterByStatus, filterByType, filterByPermissions, filterByRoles, filterByAuthRequirement, filterMenu, sortByOrder, sortByName, sortByPath, findMenuItem, findMenuItemsByName, getAllMenuPaths, generateBreadcrumbs, isPathActive, isMenuItemActive, validateMenuItem, validateMenuStructure, checkCircularReferences, buildMenu, flattenMenu, getMenuDepth, createMenuEvent, trackMenuClick, createDefaultMenuConfig, mergeMenuConfigs, isCacheExpired, generateCacheKey, hasRequiredRole, hasRequiredPermission, checkMenuItemAccess } from '../composables/navigation/navigation.utils';
export { useModal, useToast, usePagination, useTableSelection } from '../composables/ui/index';
export { createModalOptions, shouldCloseModal, createToastOptions, generateToastId, getToastStyles, getToastIcon, createPaginationOptions, calculatePaginationInfo, generatePageNumbers, createTableSelectionOptions, getItemKey, isItemSelected, toggleItemSelection, selectAllItems, createLoadingOptions, getLoadingSpinnerHTML, createDropdownOptions, calculateDropdownPosition, createTooltipOptions, calculateTooltipPosition, createPopoverOptions, createDrawerOptions, getDrawerTransform, createTabsOptions, generateTabKey, createAccordionOptions, createCarouselOptions, calculateCarouselTransform, createFormOptions, validateFormField, createSearchOptions, debounceSearch, createFilterOptions, hasActiveFilters, createSortOptions, toggleSortDirection, createNotificationOptions, generateNotificationId, createConfirmationOptions, createDragDropOptions, createResizeOptions, createScrollOptions, createAnimationOptions, getAnimationCSS } from '../composables/ui/ui.utils';
export { useUrlState, useUrlFilters, useUrlPagination, useUrlSync, useAuthInit } from '../composables/utils/index';
export { createDebouncedFunction, parseUrl, buildUrl, buildQueryString, parseQueryString, validateValue, formatTime, formatFileSize, formatPhoneNumber, unique, groupBy, sortBy, chunk, flatten, shuffle, sample, difference, intersection, union, pick, omit, deepClone, deepMerge, isEmpty, isEqual, capitalize, camelCase, kebabCase, snakeCase, pascalCase, truncate, slugify, escapeHtml, unescapeHtml, stripTags, createError, isError, getErrorInfo, formatError, captureError } from '../composables/utils/utils.utils';
export { SystemConfigItem, SystemConfigGeneral, SystemConfigCache, SystemConfigOptions, SystemConfigResult } from '../composables/system-config/types';
export { useSystemConfig, useGlobalSystemConfig } from '../composables/system-config/useSystemConfig';
export { debounce, throttle } from '../utils/debounce';
export { default as form, formToFormData, useFormDefaults, useApiFormSubmit } from '../utils/form';
export { default as formatters, formatCurrency, formatNumber, formatDate, formatDateTime, formatRelativeTime } from '../utils/formatters';
export { lazyLoadImage, generateSrcSet, generateSizes, optimizeImageUrl, generatePlaceholder } from '../utils/image';
export { useAuthStore } from '../stores/auth';
export { defineStore, acceptHMRUpdate, usePinia, storeToRefs } from '../node_modules/@pinia/nuxt/dist/runtime/composables';
export { useColorMode } from '../node_modules/@nuxtjs/color-mode/dist/runtime/composables';
export { definePageMeta } from '../node_modules/nuxt/dist/pages/runtime/composables';