import { ref, computed, readonly, type Ref, type ComputedRef } from 'vue'
import { useGlobalApiClient } from '../api/useApiClient'
import { publicEndpoints } from '../../api/endpoints'
import type { 
  SystemConfigGeneral, 
  SystemConfigCache, 
  SystemConfigOptions, 
  SystemConfigResult 
} from './types'

// ===== CACHE MANAGEMENT =====

// Cache TTL: 10 ph√∫t
const CACHE_TTL = 10 * 60 * 1000

// Cache key cho localStorage
const CACHE_KEY = 'system-config-cache'

// Helper function ƒë·ªÉ ki·ªÉm tra cache c√≥ h·∫øt h·∫°n kh√¥ng
const isCacheExpired = (timestamp: number): boolean => {
  return Date.now() - timestamp > CACHE_TTL
}

// Helper function ƒë·ªÉ l·∫•y cache t·ª´ localStorage
const getCacheFromStorage = (): SystemConfigCache | null => {
  if (typeof window === 'undefined') return null
  
  try {
    const cached = localStorage.getItem(CACHE_KEY)
    if (!cached) return null
    
    const parsedCache: SystemConfigCache = JSON.parse(cached)
    
    // Ki·ªÉm tra cache c√≥ h·∫øt h·∫°n kh√¥ng
    if (isCacheExpired(parsedCache.timestamp)) {
      localStorage.removeItem(CACHE_KEY)
      return null
    }
    
    return parsedCache
  } catch (error) {
    console.warn('Error reading cache from localStorage:', error)
    localStorage.removeItem(CACHE_KEY)
    return null
  }
}

// Helper function ƒë·ªÉ l∆∞u cache v√†o localStorage
const saveCacheToStorage = (cache: SystemConfigCache): void => {
  if (typeof window === 'undefined') return
  
  try {
    localStorage.setItem(CACHE_KEY, JSON.stringify(cache))
  } catch (error) {
    console.warn('Error saving cache to localStorage:', error)
  }
}

// Helper function ƒë·ªÉ x√≥a cache kh·ªèi localStorage
const clearCacheFromStorage = (): void => {
  if (typeof window === 'undefined') return
  
  try {
    localStorage.removeItem(CACHE_KEY)
  } catch (error) {
    console.warn('Error clearing cache from localStorage:', error)
  }
}

// Global cache store ƒë·ªÉ chia s·∫ª d·ªØ li·ªáu gi·ªØa c√°c component
const globalCache = ref<SystemConfigCache | null>(getCacheFromStorage())

// ===== COMPOSABLE =====

/**
 * Composable ƒë·ªÉ l·∫•y c·∫•u h√¨nh h·ªá th·ªëng v·ªõi cache 10 ph√∫t
 * @param group - Nh√≥m c·∫•u h√¨nh (v√≠ d·ª•: 'general')
 * @param options - T√πy ch·ªçn cache
 */
export function useSystemConfig(
  group: string = 'general',
  options: SystemConfigOptions = {}
): SystemConfigResult {
  const { forceRefresh = false, enableCache = true } = options
  
  const { apiClient } = useGlobalApiClient()
  
  // Reactive state
  const data = ref<SystemConfigGeneral | null>(null)
  const loading = ref(false)
  const error = ref<any>(null)
  
  // Computed ƒë·ªÉ ki·ªÉm tra cache c√≥ h·ª£p l·ªá kh√¥ng
  const isCacheValid = computed(() => {
    if (!enableCache || !globalCache.value) return false
    return !isCacheExpired(globalCache.value.timestamp)
  })
  
  // Function ƒë·ªÉ fetch data t·ª´ API
  const fetchData = async (): Promise<void> => {
    try {
      loading.value = true
      error.value = null
      
      const endpoint = publicEndpoints.systemConfigs.getByGroup(group)
      const response = await apiClient.get<SystemConfigGeneral>(endpoint)
      
      // Transform data t·ª´ array th√†nh object
      const configData = transformConfigData(response.data)
      
      // Update reactive data
      data.value = configData
      
      // Update global cache v√† l∆∞u v√†o localStorage
      if (enableCache) {
        const cacheData: SystemConfigCache = {
          data: configData,
          timestamp: Date.now(),
          ttl: CACHE_TTL
        }
        
        globalCache.value = cacheData
        saveCacheToStorage(cacheData)
        
        console.log('‚úÖ System config cached for 10 minutes')
      }
      
    } catch (err) {
      error.value = err
      console.error('Error fetching system config:', err)
    } finally {
      loading.value = false
    }
  }
  
  // Function ƒë·ªÉ transform data t·ª´ API response
  const transformConfigData = (apiData: any): SystemConfigGeneral => {
    // N·∫øu API tr·∫£ v·ªÅ array c·ªßa config items
    if (Array.isArray(apiData)) {
      const config: SystemConfigGeneral = {}
      apiData.forEach((item: any) => {
        if (item.key && item.value !== undefined) {
          config[item.key] = item.value
        }
      })
      return config
    }
    
    // N·∫øu API tr·∫£ v·ªÅ object tr·ª±c ti·∫øp (format m·ªõi)
    return apiData || {}
  }
  
  // Function ƒë·ªÉ l·∫•y data (t·ª´ cache ho·∫∑c fetch m·ªõi)
  const getData = async (): Promise<SystemConfigGeneral | null> => {
    // Ki·ªÉm tra cache t·ª´ localStorage n·∫øu ch∆∞a c√≥ trong memory
    if (!globalCache.value) {
      const cachedData = getCacheFromStorage()
      if (cachedData) {
        globalCache.value = cachedData
        data.value = cachedData.data
        console.log('üì¶ System config loaded from localStorage cache')
        return cachedData.data
      }
    }
    
    // N·∫øu c√≥ cache h·ª£p l·ªá v√† kh√¥ng force refresh
    if (isCacheValid.value && !forceRefresh) {
      data.value = globalCache.value!.data
      console.log('‚ö° System config loaded from memory cache')
      return globalCache.value!.data
    }
    
    // Fetch data m·ªõi
    console.log('üåê Fetching system config from API...')
    await fetchData()
    return data.value
  }
  
  // Function ƒë·ªÉ clear cache
  const clearCache = (): void => {
    globalCache.value = null
    data.value = null
    clearCacheFromStorage()
    console.log('üóëÔ∏è System config cache cleared')
  }
  
  // Function ƒë·ªÉ refresh data (force fetch)
  const refresh = async (): Promise<void> => {
    await getData()
  }
  
  // Function ƒë·ªÉ l·∫•y m·ªôt config value c·ª• th·ªÉ
  const getConfigValue = (key: string, defaultValue: any = null): any => {
    if (!data.value) return defaultValue
    return data.value[key] ?? defaultValue
  }
  
  // Function ƒë·ªÉ l·∫•y system info
  const systemInfo = computed(() => ({
    name: getConfigValue('name', ''),
    version: getConfigValue('version', ''),
    timezone: getConfigValue('timezone', '')
  }))
  
  return {
    // State
    data: readonly(data),
    loading: readonly(loading),
    error: readonly(error),
    
    // Computed
    isCacheValid,
    systemInfo,
    
    // Methods
    getData,
    fetchData,
    refresh,
    clearCache,
    getConfigValue
  }
}

// ===== GLOBAL SYSTEM CONFIG COMPOSABLE =====

/**
 * Global composable ƒë·ªÉ l·∫•y c·∫•u h√¨nh general (s·ª≠ d·ª•ng ·ªü m·ªçi trang)
 * T·ª± ƒë·ªông cache v√† chia s·∫ª d·ªØ li·ªáu gi·ªØa c√°c component
 */
export function useGlobalSystemConfig(): SystemConfigResult {
  return useSystemConfig('general', {
    enableCache: true,
    forceRefresh: false
  })
}
